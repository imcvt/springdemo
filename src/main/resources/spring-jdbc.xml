<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
         http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

    <context:property-placeholder location="classpath:jdbc.properties" />
    <context:annotation-config />
    <context:component-scan base-package="com.testspring" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="userDao" class="com.testspring.dao.impl.UserDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--单个bean代理方式开始-->
    <!--<bean id="userDao" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">-->
        <!--&lt;!&ndash;配置目标对象&ndash;&gt;-->
        <!--<property name="target" ref="userDaoTarget"/>-->
        <!--&lt;!&ndash;注入事务管理&ndash;&gt;-->
        <!--<property name="transactionManager" ref="txManager"/>-->
        <!--&lt;!&ndash; 配置事务属性 &ndash;&gt;-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->
    <!--单个bean代理方式结束-->

    <!--多个bean使用一个代理基类开始-->
    <!--<bean id="transactionBase" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" lazy-init="true" abstract="true">-->
        <!--&lt;!&ndash; 配置事务管理器 &ndash;&gt;-->
        <!--<property name="transactionManager" ref="txManager" />-->
        <!--&lt;!&ndash; 配置事务属性 &ndash;&gt;-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean id = "userDao" parent="transactionBase">-->
        <!--<property name="target" ref="userDaoTarget" />-->
    <!--</bean>-->
    <!--多个bean使用一个代理基类结束-->

    <!--拦截器方式开始（需要修改上面的userDaoTarget为userDao，此方式是拦截的是bean，不初始化是拦截不了的）-->
    <!--<bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
        <!--<property name="transactionManager" ref="txManager" />-->
        <!--&lt;!&ndash; 配置事务属性 &ndash;&gt;-->
        <!--<property name="transactionAttributes">-->
            <!--<props>-->
                <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->

    <!--<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
        <!--<property name="beanNames">-->
            <!--<list>-->
                <!--&lt;!&ndash;<value>userDaoProxy</value>&ndash;&gt;-->
                <!--<value>*Dao</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="interceptorNames">-->
            <!--<list>-->
                <!--<value>transactionInterceptor</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--拦截器方式结束-->

    <!--tx标签拦截器开始，需要引入aop依赖-->
    <!--<tx:advice id="txAdvice" transaction-manager="txManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--<aop:config>-->
        <!--&lt;!&ndash;表示com.testspring.dao包下的所有方法为为事务管理。&ndash;&gt;-->
        <!--&lt;!&ndash;expression="execution(* com.testspring.dao.*.*(..)) 是com.testspring..*dao包下所有的类的所有方法"&ndash;&gt;-->
        <!--&lt;!&ndash;第一个*代表所有的返回值类型&ndash;&gt;-->
        <!--&lt;!&ndash;第二个*代表所有的类&ndash;&gt;-->
        <!--&lt;!&ndash;第三个*代表类所有方法 最后一个..代表所有的参数&ndash;&gt;-->
        <!--<aop:pointcut id="interceptorPointCuts" expression="execution(* com.testspring.dao.*.*(..))" />-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />-->
    <!--</aop:config>-->
    <!--tx标签拦截器结束-->

    <tx:annotation-driven transaction-manager="txManager" />


</beans>